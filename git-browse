#!/usr/bin/env python

import curses
import os

key_bindings = {}

def bind_keys(*keys):
    def decorator(func):
        for k in keys:
            code = ord(k) if type(k) is str else k
            key_bindings[code] = func.__name__
        return func
    return decorator


class GitBrowser(object):
    def __init__(self, screen, path, commit):
        curses.curs_set(0)

        self.screen = screen
        self.path = path
        self.commit = commit

        self.scroll_line = 0

        self.commits_win = screen.subwin(curses.LINES, 8, 0, 0)
        self.code_win = screen.subwin(curses.LINES, curses.COLS-9, 0, 9)

        self.read_history()

    def read_history(self):
        self.lines = []
        self.commits = {}

        p = os.popen('git blame -p %s %s' % (self.path, self.commit), 'r')

        while True:
            header = p.readline()
            if not header:
                break

            # Header format:
            # commit_sha original_line final_line[ lines_in_group]
            commit, original_line, final_line = header.split(' ')[:3]

            line = p.readline()

            # Parse any addition headers describing the commit
            commit_description = {}
            while not line.startswith('\t'):
                h_parts = line.split(' ', 1)
                h_field = h_parts[0]
                commit_description[h_field] = len(h_parts) < 2 or h_parts[1]

                line = p.readline()

            self.lines.append((commit, line[1:], ))

            if commit_description:
                self.commits[commit] = commit_description

    def draw(self):
        start = self.scroll_line
        stop = self.scroll_line + curses.LINES - 1
        visible_lines = self.lines[start:stop]

        for i, (commit, line) in enumerate(visible_lines):
            self.commits_win.addstr(i, 0, commit[:7])
            self.code_win.addstr(i, 0, line[0:curses.COLS-8])

        self.commits_win.noutrefresh()
        self.code_win.noutrefresh()
        curses.doupdate()

    def wait_for_key(self):
        return self.screen.getch()

    @bind_keys('j', curses.KEY_DOWN)
    def down(self, lines=1):
        self.scroll_line = min(self.scroll_line+lines, self.max_scroll_line())

    @bind_keys('f')
    def page_down(self):
        self.down(curses.LINES - 1)

    @bind_keys('k', curses.KEY_UP)
    def up(self, lines=1):
        self.scroll_line = max(self.scroll_line - lines, 0)

    @bind_keys('b')
    def page_up(self):
        self.up(curses.LINES - 1)

    @bind_keys('g')
    def home(self):
        self.scroll_line = 0

    @bind_keys('G')
    def end(self):
        self.scroll_line = self.max_scroll_line()

    @bind_keys('n')
    def next_commit(self):
        #TODO Move to next commit
        self.read_history()

    @bind_keys('p')
    def prev_commit(self):
        #TODO Move to previous commit
        self.read_history()

    def max_scroll_line(self):
        return len(self.lines) - curses.LINES + 1


def main_loop(screen, path, commit):
    browser = GitBrowser(screen, path, commit)

    while True:
        browser.draw()
        c = browser.wait_for_key()

        if c == ord('q'):
            return

        if c in key_bindings:
            getattr(browser, key_bindings[c])()

#TODO Get path and commit from command line
path = 'git-browse'
commit = 'HEAD'
curses.wrapper(main_loop, path, commit)
